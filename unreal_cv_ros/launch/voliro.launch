<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="kea"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.1"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal/Routine arguments -->
  <arg name="model_type" default="ground_truth"/>
  <arg name="uecv_mode" default="standard"/>
  <arg name="slowdown" default="0.3"/>
  
  <!-- Planner -->
  <arg name="delay" default="5.0"/>
  <arg name="mav_velocity" default="0.3"/>
  

  <include file="$(find overactuated_simulation)/launch/kea_simulation_unreal.launch"/>

   <!-- tof normal estimation-->
  <include file="$(find tof_normal_estimation)/launch/tof_normal_node_unreal.launch"/>


   <include file="$(find coverage_planning_voxblox)/launch/mapping_unreal.launch">
        <arg name="mav_name" value="$(arg mav_name)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 0 0.7071068 0 0.7071068 /$(arg mav_name)/base_link /camera 100"/>	

<!-- our coverage planner sends trajectory to controller and does reactive surface following -->
    <node name="vb_coverage_planner_node" pkg="coverage_planning_voxblox" type="vb_coverage_planner_node"
          output="screen" args="-alsologtostderr">
        <remap from="odometry" to="odometry_sensor1/odometry"/>
        <remap from="pose" to="/firefly/ground_truth/pose"/>
        <remap from="surface_pcl" to="/firefly/mav_local_planner/surface_pointcloud"/>
        <remap from="vi_pcl" to="/firefly/vi_sensor/camera_depth/depth/points"/>
        <remap from="vb_coverage_planner_node/esdf_map_in" to="esdf_map"/>
    </node>

	</group>



  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" output="screen">
			<param name="mode" value="$(arg uecv_mode)"/>
		  <param name="slowdown" value="$(arg slowdown)"/>
		  <remap from="odometry" to="/$(arg mav_name)/camera_odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
			<param name="model_type" value="ground_truth"/>
      <param name="maximum_distance" value="$(arg ray_length)"/>
		  <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>
    
    <!-- Simulation manager for launching and monitoring-->
		<node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
			<param name="ns_mav" value="/$(arg mav_name)" />
			<param name="monitor" value="true" />
			<remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
			<remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
		</node>
  </group>

	<!-- riks coverage planner, has service to generate zigzag coverage in polygone environment -->
  <include file="$(find mav_coverage_planning)/launch/coverage_planner.launch">
  </include> 

	<!-- Visualization -->
	<node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find unreal_cv_ros)/cfg/tof_unreal.rviz"/>
</launch>
